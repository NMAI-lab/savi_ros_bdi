/*
 * Copyright (C) 2014 pi.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

/* This plugin is necessary for creating installDist tasks (i.e. executables) */
apply plugin: 'application'
mainClassName = 'org.ros.RosRun'

apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8

/*
 Needed for JaCaMo, for Jason.
 */
repositories {
  mavenCentral()
  maven { url "https://raw.github.com/jacamo-lang/mvn-repo/master" }
}

/*
 Examples of
   1) dependencies from another project in this gradle stack.
   2,3) open ranged dependencies from a maven repository.

   Dependencies can be on external maven artifacts (such as rosjava_core
   here) or on sibling subprojects. For rosjava maven artifact dependencies
   it is a good idea to use open ranges on to
   save continually updating these references, but it is recommended
   to restrict this to the patch version number (e.g. [0.3,0.4) will
   get the latest 0.3.x version) to avoid unknowingly
   having api breaking changes usually associated with minor and major
   version number changes.
*/
dependencies {
  /* An external maven artifact dependency */
  compile 'org.ros.rosjava_core:rosjava:[0.3,0.4)'
  compile fileTree(include: ['*.jar'], dir: 'lib')

  implementation group: 'org.jason' , name: 'jason' , version: '2.6-SNAPSHOT', changing: true, transitive: false

  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.0-M1'
  testRuntime("org.junit.vintage:junit-vintage-engine:5.2.0")
  /* Example of a local subproject dependency */
  /* compile project(':sibling_gradle_project') */
}

task cleanScripts(dependsOn: 'installDist') {
  doLast {
    file('build/scripts').deleteDir()
  }
}

test {
  useJUnitPlatform()
}

installDist.finalizedBy(cleanScripts)